import os
import json
import time
import logging
from datetime import datetime

from dotenv import load_dotenv
import requests
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id

# ===================== CONFIG & LOGGING =====================

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
logger = logging.getLogger("vk-bot")

VK_TOKEN = os.getenv("VK_TOKEN", "").strip()
VK_GROUP_ID_RAW = os.getenv("VK_GROUP_ID", "").strip()
SERVER_URL = os.getenv("SERVER_URL", "http://localhost:8000").rstrip("/")

# –ñ—ë—Å—Ç–∫–æ —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ LongPoll
if not VK_TOKEN:
    raise RuntimeError("VK_TOKEN –ø—É—Å—Ç. –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç–æ–∫–µ–Ω –≤ .env")

try:
    VK_GROUP_ID = int(VK_GROUP_ID_RAW)
except ValueError:
    raise RuntimeError(f"VK_GROUP_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–∏–ª–∏: {VK_GROUP_ID_RAW!r}")

API_VERSION = os.getenv("VK_API_VERSION", "5.199")
REQUEST_TIMEOUT = float(os.getenv("REQUEST_TIMEOUT", "5.0"))  # —Å–µ–∫—É–Ω–¥
LP_RETRY_DELAY = float(os.getenv("LP_RETRY_DELAY", "3.0"))    # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏

# ===================== BOT CORE =====================

class VKPromoBot:
    def __init__(self, token: str, group_id: int, server_url: str, api_version: str):
        self.group_id = group_id
        self.server_url = server_url

        self.vk_session = vk_api.VkApi(token=token, api_version=api_version)
        self.vk = self.vk_session.get_api()
        self.longpoll = VkBotLongPoll(self.vk_session, group_id)

        logger.info("LongPoll –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. group_id=%s api_version=%s", group_id, api_version)

    # -------- UTILS --------

    def _post_event(self, payload: dict) -> bool:
        try:
            resp = requests.post(f"{self.server_url}/events", json=payload, timeout=REQUEST_TIMEOUT)
            if resp.ok:
                logger.info("–°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", payload.get("event_type"))
                return True
            logger.error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª %s: %s", resp.status_code)
        except requests.RequestException as e:
            logger.error("–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è: %s", e)
        return False

    def _now_iso(self) -> str:
        return datetime.utcnow().isoformat()

    def _get_user_info(self, user_id: int):
        try:
            # users.get –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –±–æ—Ç–æ–≤
            info = self.vk.users.get(user_ids=user_id)[0]
            return info
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ users.get: %s", e)
            return None

    def _send_message(self, user_id: int, text: str):
        try:
            self.vk.messages.send(
                user_id=user_id,
                message=text,
                random_id=get_random_id(),
            )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ messages.send: %s", e)

    # -------- EVENT BUILDERS --------

    def _build_event(self, event_type: str, user_info: dict, payload_extra: dict | None = None):
        payload = {
            "event_type": event_type,
            "timestamp": self._now_iso(),
            "vk_user_info": {
                "id": user_info["id"],
                "first_name": user_info.get("first_name", ""),
                "last_name": user_info.get("last_name", ""),
            },
            "payload": {}
        }
        if payload_extra:
            payload["payload"].update(payload_extra)
        return payload

    # -------- HELPERS --------


    @staticmethod
    def _extract_qr_id_from_message(message_obj: dict) -> str | None:
        # 1) payload
        payload = message_obj.get("payload")
        if payload:
            try:
                data = json.loads(payload) if isinstance(payload, str) else payload
                qr = data.get("qr_id")
                if qr:
                    return str(qr)
            except Exception:
                pass
        # 2) ref / ref_source (–µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –∏–∑ m.vk.com/‚Ä¶)
        ref = message_obj.get("ref") or message_obj.get("ref_source")
        return str(ref) if ref else None

    # -------- HANDLERS --------

    def handle_message_new(self, obj: dict):
        message = obj.get("message", obj)

        # 2) user_id –±–µ—Ä—ë–º –∏–∑ from_id (peer_id ‚Äî —ç—Ç–æ –±–µ—Å–µ–¥—ã/–¥–∏–∞–ª–æ–≥–∏, –Ω–∞–º –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        user_id = message.get("from_id")
        if not user_id:
            return

        # 3) –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = self._get_user_info(user_id)
        if not user:
            return

        ref = None

        # 4.1) payload –º–æ–∂–µ—Ç –±—ã—Ç—å str (JSON) –∏–ª–∏ dict
        payload = message.get("payload")
        if isinstance(payload, str):
            try:
                payload = json.loads(payload)
            except json.JSONDecodeError:
                payload = None

        if isinstance(payload, dict):
            # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–µ–π—Å: {"ref": "promoter_002", ...}
            ref = payload.get("ref") or payload.get("qr_id") or payload.get(
                "key"
                )

        # 4.2) –∑–∞–ø–∞—Å–Ω—ã–µ –ø–æ–ª—è –æ—Ç VK (–Ω–∞ –≤—Å—è–∫–∏–π)
        if not ref:
            ref = (message.get("ref")
                   or obj.get("ref")
                   or message.get("ref_source")
                   or obj.get("ref_source"))

        # 5) –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ Link (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ), –Ω–æ –æ—Ç message_new
        event_payload = {"qr_id": ref} if ref else None
        if event_payload:
            event = self._build_event("Link", user, event_payload)
            self._post_event(event)

        # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–º–æ–∂–µ—à—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ —É—Å–ª–æ–≤–∏—é, –µ—Å–ª–∏ –Ω–∞–¥–æ)
        self._send_message(
            user_id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É."
            + (f"\n–ò—Å—Ç–æ—á–Ω–∏–∫: {ref}" if ref else "")
        )
    def handle_group_join(self, obj: dict):
        user_id = obj.get("user_id")
        if not user_id:
            return

        user = self._get_user_info(user_id)
        if not user:
            return

        join_type = obj.get("join_type")
        event = self._build_event("Subscribe", user, {"join_type": join_type} if join_type else None)
        self._post_event(event)

        #self._send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã —Ç–µ–ø–µ—Ä—å –≤ —Ç–µ–º–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ‚ú®")

    def handle_group_leave(self, obj: dict):
        user_id = obj.get("user_id")
        if not user_id:
            return

        user = self._get_user_info(user_id)
        if not user:
            return

        self_leave = obj.get("self")
        extra = {"self_leave": bool(self_leave)} if self_leave is not None else None
        event = self._build_event("Unsubscribe", user, extra)
        self._post_event(event)

    # -------- LONGPOLL LOOP --------

    def run(self):
        logger.info("–°—Ç–∞—Ä—Ç LongPoll. group_id=%s server_url=%s", self.group_id, self.server_url)

        while True:
            try:
                for event in self.longpoll.listen():
                    try:
                        et = event.type

                        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–±–∞–∂–∏—Ç—å
                        logging.debug("RAW EVENT: %s | object=%s", et, getattr(event, "object", None))

                        if et == VkBotEventType.MESSAGE_NEW:
                            obj = event.object if isinstance(event.object, dict) else {}
                            self.handle_message_new(obj)

                        elif et == VkBotEventType.GROUP_JOIN:
                            obj = event.object if isinstance(event.object, dict) else {}
                            self.handle_group_join(obj)

                        elif et == VkBotEventType.GROUP_LEAVE:
                            obj = event.object if isinstance(event.object, dict) else {}
                            self.handle_group_leave(obj)


                    except Exception as e:
                        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: %s", e, exc_info=True)

            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
                break
            except Exception as e:
                # –°–µ—Ç—å/401/timeout ‚Äî –∂–¥—ë–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º longpoll
                logger.error("LongPoll –æ—Ç–≤–∞–ª–∏–ª—Å—è: %s ‚Äî –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—Å—å —á–µ—Ä–µ–∑ %.1fs", e, LP_RETRY_DELAY)
                time.sleep(LP_RETRY_DELAY)
                try:
                    self.longpoll = VkBotLongPoll(self.vk_session, self.group_id)
                    logger.info("LongPoll –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á—ë–Ω")
                except Exception as e2:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å LongPoll: %s", e2)
                    time.sleep(LP_RETRY_DELAY)


def main():
    bot = VKPromoBot(VK_TOKEN, VK_GROUP_ID, SERVER_URL, API_VERSION)
    bot.run()


if __name__ == "__main__":
    main()
